[
    {
        "QUESTION": "What if we activate supplier 1 and 3 along with roastery 2 in the high and roastery 1 in the low setting?",
        "CODE": "import gurobipy as grb\nimport numpy as np\nfrom llms_decision_support.python_files.coffee_stochastic_evaluation import StochasticModel\nevaluate_stochastic = StochasticModel.evaluate_stochastic\nresult = evaluate_stochastic(\n\tfixed_activation_decisions={'supplier1': 'activate', 'supplier2': 'do not activate', 'supplier3': 'supplier3', 'roastery1': 'activate (low)', 'roastery2': 'activate (high)'}\n)\nprint(result)"
    },
    {
        "QUESTION": "Which are the top 3 sets of decisions in terms of average profit incl. scenarios and probabilities for all 3?",
        "ANSWER": "import gurobipy as grb\nimport numpy as np\nfrom llms_decision_support.python_files.coffee_stochastic_evaluation import StochasticModel\nevaluate_stochastic = StochasticModel.evaluate_stochastic\n# Define all possible activation decisions for suppliers and roasteries\nsupplier_decisions = [\t{'supplier1': 'activate', 'supplier2': 'do not activate', 'supplier3': 'do not activate'},\t{'supplier1': 'do not activate', 'supplier2': 'activate', 'supplier3': 'do not activate'},\t{'supplier1': 'do not activate', 'supplier2': 'do not activate', 'supplier3': 'activate'},\t{'supplier1': 'activate', 'supplier2': 'activate', 'supplier3': 'do not activate'},\t{'supplier1': 'activate', 'supplier2': 'do not activate', 'supplier3': 'activate'},\t{'supplier1': 'do not activate', 'supplier2': 'activate', 'supplier3': 'activate'},\t{'supplier1': 'activate', 'supplier2': 'activate', 'supplier3': 'activate'}]\nroastery_decisions = [\t{'roastery1': 'activate (low)', 'roastery2': 'do not activate'},\t{'roastery1': 'do not activate', 'roastery2': 'activate (low)'},\t{'roastery1': 'activate (high)', 'roastery2': 'do not activate'},\t{'roastery1': 'do not activate', 'roastery2': 'activate (high)'},\t{'roastery1': 'activate (low)', 'roastery2': 'activate (low)'},\t{'roastery1': 'activate (high)', 'roastery2': 'activate (high)'}]\n# Store results for expected profits\nresults = []\n# Evaluate all combinations\nfor supplier_choice in supplier_decisions:\tfor roastery_choice in roastery_decisions:\t\tfixed_activation_decisions = {**supplier_choice, **roastery_choice}\t\tresult = evaluate_stochastic(fixed_activation_decisions)\t\texpected_profit = sum(p * prob for p, prob in result.items())\t\tresults.append((expected_profit, fixed_activation_decisions, result))\n# Sort results by expected profit in descending order and select the top 3\ntop_3_results = sorted(results, key=lambda x: x[0], reverse=True)[:3]\nfor idx, (expected_profit, decisions, probabilities) in enumerate(top_3_results, start=1):\tformatted_scenarios = '; '.join([f'${p:,.0f}: {prob:.0%}' for p, prob in probabilities.items()])\tprint(f'Top {idx} Activation Decisions: {decisions}')\tprint(f'Expected Profit: ${expected_profit:,.0f}')\tprint(f'Profit Scenarios and Probabilities: {formatted_scenarios}')"
    }
]